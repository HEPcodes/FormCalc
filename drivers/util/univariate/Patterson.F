* Patterson.F
* non-adaptive 1D Gauss-Kronrod-Patterson integration
* adapted from Quadpack's dqng.f for vector integrands
* this file is part of FormCalc
* last modified 24 Mar 19 th

#include "config.h"

#define C 1:ncomp

	subroutine Patterson(ncomp, lower, upper,
     &    integrand, userdata,
     &    epsrel, epsabs, neval, fail, result, error)
	implicit none
	integer ncomp, neval, fail
	RealType lower, upper, epsrel, epsabs
	RealType result(C), error(C)
	external integrand, userdata

	RealType samples(MAXCOMP,2,0:43)
	RealType res(MAXCOMP,0:3)
	RealType span, mid, h
	integer j, c

#define i10 0
#define i21 1
#define i43 0
#define i87 1

#define Int10(c) res(c,i10)
#define Int21(c) res(c,i21)
#define Int43(c) res(c,i43)
#define Int87(c) res(c,i87)
#define Error(c) res(c,2)
#define Fluct(c) res(c,3)

	RealType x(43), w10(5), w21(0:10)
	RealType w43(0:21), w87(0:43)

	data x /
     &    .486953264258585860038982006042226D0,
     &    .432531683344492255366048344211746D0,
     &    .339704784149512203117163682557437D0,
     &    .216697697064623595399632971582892D0,
     &    .074437169490815605442413000564860D0,
     &    .497828581512904040367763640344502D0,
     &    .465078745677854113000603590029754D0,
     &    .390408863293208448531858789172521D0,
     &    .281378567334302341669500049636347D0,
     &    .147196431350730099065563301551933D0,
     &    .499666680450966040697049661959956D0,
     &    .493716701454044434897980739190604D0,
     &    .477403967407133149628959600145236D0,
     &    .450074347874164146812549747034546D0,
     &    .412599157491557075423533366294260D0,
     &    .366074194494652491306177424377730D0,
     &    .311423985268862619320579560172162D0,
     &    .249739787035528249976107442749878D0,
     &    .182450830673290384021994774251322D0,
     &    .111127459888300648249130464033106D0,
     &    .037325308730691661021957217898253D0,
     &    .499951488631364617245264915295791D0,
     &    .498994947993339372713748161182980D0,
     &    .496087748930343611404261676125712D0,
     &    .490679081786356386785958470811947D0,
     &    .482528811929192309564142055303963D0,
     &    .471583806566835298408208317253713D0,
     &    .457903207342753604795913215360025D0,
     &    .441610828885658250686058774372082D0,
     &    .422855374231207833302951005752428D0,
     &    .401778829017615491394369737490482D0,
     &    .378502865342747779164471396716010D0,
     &    .353136604893660909912047137370420D0,
     &    .325794733250588961267211102508368D0,
     &    .296611687028980544437636885174572D0,
     &    .265746802985415966142634474281336D0,
     &    .233381811521011422435983390829635D0,
     &    .199712423929609402366050832908962D0,
     &    .164937438553094144132526685912298D0,
     &    .129251779601080775901140487714512D0,
     &    .092847698284173326007958570583803D0,
     &    .055921106589953734086199179620681D0,
     &    .018676061697309935407499082718852D0 /

	data w10 /
     &    .033335672154344068796784404946666D0,
     &    .074725674575290296572888169828848D0,
     &    .109543181257991021997767467114082D0,
     &    .134633359654998177545613460784734D0,
     &    .147762112357376435086946497325669D0 /

	data w21 /
     &    .074722777001458452832468234194910D0,
     &    .016279081153982363739409486229695D0,
     &    .037519837405459976383521570458095D0,
     &    .054693579401148820949605295162902D0,
     &    .067354608655736662964027000885854D0,
     &    .073869552450669245687420757986034D0,
     &    .005847319433685937139032198031096D0,
     &    .027377948287175998015690650122290D0,
     &    .046562727291848802767532732541683D0,
     &    .061745988131032925538979054915537D0,
     &    .071387969288530040398547136569358D0 /

	data w43 /
     &    .037361073758701502797212584140212D0,
     &    .008148367144833282462140987308832D0,
     &    .018761438060434750730806897949058D0,
     &    .027347451029127721073606342732502D0,
     &    .033677707304739043037776583151087D0,
     &    .036935099816196976716070347625684D0,
     &    .002884278029884898092092163954328D0,
     &    .013685945296624421040638034644576D0,
     &    .023280413455214415371669577216912D0,
     &    .030872497600721282248120168015442D0,
     &    .035693633634346698884279557212758D0,
     &    .000922238820106207050194553276482D0,
     &    .005399344792945825870232703370646D0,
     &    .010947681933897714051261561537574D0,
     &    .016298731987672844721941111263068D0,
     &    .021081568967595905923813962163978D0,
     &    .025370969800092288890094510046042D0,
     &    .029189697771309624187737684665103D0,
     &    .032373202475722942772344629758756D0,
     &    .034783098956178242264316657519202D0,
     &    .036412220735916604075469767596421D0,
     &    .037253875507087559136785906921444D0 /

	data w87 /
     &    .018680536881339511705160620883300D0,
     &    .004074188692074586450001439224095D0,
     &    .009380719100781411121967529501897D0,
     &    .013673725525026143080791414870642D0,
     &    .016838853655818965023290528478794D0,
     &    .018467549910213953807294793371250D0,
     &    .001442436215105765250667078124348D0,
     &    .006842973011356350944475017636564D0,
     &    .011640206751444155561704645515202D0,
     &    .015436248805856679337733197063221D0,
     &    .017846816819709385359675677728522D0,
     &    .000457641672601120680421696274974D0,
     &    .002699640109650235683869371695526D0,
     &    .005473839800559465567163913428404D0,
     &    .008149365848393667631332851611640D0,
     &    .010540784444601917556216530094095D0,
     &    .012685484884626913621733999915855D0,
     &    .014594848878237876250723077042460D0,
     &    .016186601233601394842894097444798D0,
     &    .017391549475182571375390998974798D0,
     &    .018206110365675893781400581843788D0,
     &    .018626937751523854269796000595613D0,
     &    .000137072781881036175008263546440D0,
     &    .000903562077528971474170655876627D0,
     &    .002048434641379582432229035341740D0,
     &    .003379145025923689349908288948712D0,
     &    .004774978836100823268026790662688D0,
     &    .006164723826122426847313319981890D0,
     &    .007505223673194476188348643020972D0,
     &    .008774483993121595549832676462950D0,
     &    .009969018893220444101139096365357D0,
     &    .011097467980506143398166051479750D0,
     &    .012169573563000402735180323520727D0,
     &    .013187252707419603620751893276308D0,
     &    .014143455394385600329984001493980D0,
     &    .015026290564046347661260555173670D0,
     &    .015823375685719964702293025539442D0,
     &    .016525206709989251645392972431344D0,
     &    .017127549852113030893541410523410D0,
     &    .017631206330078340516891358999214D0,
     &    .018038494811444350592750159001948D0,
     &    .018349302249228047249009023720547D0,
     &    .018560274634916288057059979206800D0,
     &    .018667114375967520160617724547349D0 /

	span = upper - lower
	mid = (lower + upper)/2
	fail = 0

* compute the integral using the 10- and 21-point formula

	call integrand(1, mid, ncomp, samples(1,1,0), userdata)
	do j = 1, 10
	  h = span*x(j)
	  call integrand(1, mid + h, ncomp, samples(1,1,j), userdata)
	  call integrand(1, mid - h, ncomp, samples(1,2,j), userdata)
	enddo
	neval = 21

	forall(c = C)
	  Int10(c) =
     &      sum(w10(1:5)*(samples(c,1,1:5) + samples(c,2,1:5)))
	  Int21(c) = w21(0)*samples(c,1,0) +
     &      sum(w21(1:10)*(samples(c,1,1:10) + samples(c,2,1:10)))
	  Error(c) = abs(Int21(c) - Int10(c))
	  Fluct(c) = w21(0)*abs(samples(c,1,0) - Int21(c)) +
     &      sum(w21(1:10)*(abs(samples(c,1,1:10) - Int21(c)) +
     &                     abs(samples(c,2,1:10) - Int21(c))))
	endforall

	where( Fluct(C) > 1D-13 )
     &    Error(C) = Fluct(C)*min(1D0, (200*Error(C)/Fluct(C))**1.5D0)
	if( all(Error(C) < max(abs(Int21(C))*epsrel, epsabs)) ) goto 9

* compute the integral using the 43-point formula

	do j = 11, 21
	  h = span*x(j)
	  call integrand(1, mid + h, ncomp, samples(1,1,j), userdata)
	  call integrand(1, mid - h, ncomp, samples(1,2,j), userdata)
	enddo
	neval = 43

	forall(c = C)
	  Int43(c) = w43(0)*samples(c,1,0) +
     &      sum(w43(1:21)*(samples(c,1,1:21) + samples(c,2,1:21)))
	  Error(c) = abs(Int43(c) - Int21(c))
	endforall

	where( Fluct(C) > 1D-13 )
     &    Error(C) = Fluct(C)*min(1D0, (200*Error(C)/Fluct(C))**1.5D0)
	if( all(Error(C) < max(abs(Int43(C))*epsrel, epsabs)) ) goto 9

* compute the integral using the 87-point formula

	do j = 22, 43
	  h = span*x(j)
	  call integrand(1, mid + h, ncomp, samples(1,1,j), userdata)
	  call integrand(1, mid - h, ncomp, samples(1,2,j), userdata)
	enddo
	neval = 87

	forall(c = C)
	  Int87(c) = w87(0)*samples(c,1,0) +
     &      sum(w87(1:43)*(samples(c,1,1:43) + samples(c,2,1:43)))
	  Error(c) = abs(Int87(c) - Int43(c))
	endforall

	where( Fluct(C) > 1D-13 )
     &    Error(C) = Fluct(C)*min(1D0, (200*Error(C)/Fluct(C))**1.5D0)
	if( all(Error(C) < max(abs(Int87(C))*epsrel, epsabs)) ) goto 9

	fail = 1

9	result(C) = span*res(C,ibits(neval,2,1))
	error(C) = span*Error(C)
	end
